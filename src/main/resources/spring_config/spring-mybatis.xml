<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd">

        <!--数据源配置-->
        <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>

        <!--数据源配置-->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driverClass}" />
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <property name="minIdle" value="5" />
            <property name="initialSize" value="10" />
            <property name="maxActive" value="50" />
            <property name="maxWait" value="30000" />
            <property name="testOnBorrow" value="true" />
            <property name="testWhileIdle" value="true" />
            <property name="testOnReturn" value="true" />
            <property name="validationQuery" value="select 1 from dual" />
            <property name="validationQueryTimeout" value="5" />
            <property name="timeBetweenEvictionRunsMillis" value="160000" />
            <!--<property name="mNinEvictableIdleTimeMillis" value="30000" />-->
            <property name="filters" value="stat" />
        </bean>

        <!--session工厂,打扫所有Mapper文件-->
        <bean id="sqlSessionFactory" name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource"/>
            <property name="configLocation" value="classpath:mybatis_config/Configuration.xml" />
            <property name="typeAliasesPackage" value="com.zz.framework.entity" />
            <property name="mapperLocations">
                <list>
                    <value>classpath*:mappings/*.xml</value>
                </list>
            </property>
        </bean>

        <!--session模板-->
        <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg index="0" ref="sqlSessionFactory" />
            <constructor-arg index="1" value="BATCH" />
        </bean>

        <!--打扫所有DAO-->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="com.zz.framework.dao" />
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        </bean>

        <!--定义事务管理器-->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource"/>
        </bean>

        <!--采用注解式事务配置-->
        <tx:annotation-driven transaction-manager="transactionManager"/>

        <!-- 事务管理 通知 -->
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
                <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
                <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
                <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
                <!-- find,select,count开头的方法,开启只读,提高数据库访问性能 -->
                <tx:method name="select*" read-only="true" />
                <tx:method name="count*" read-only="true" />
                <tx:method name="find*" read-only="true" />
                <!-- 对其他方法 使用默认的事务管理 -->
                <tx:method name="*"/>
            </tx:attributes>
        </tx:advice>

        <!-- 事务 aop 配置 -->
        <aop:config>
            <aop:pointcut id="serviceMethods" expression="execution(* com.zz.framework.service..*(..))"/>
            <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
        </aop:config>

        <!--配置spring使用CGLIB代理-->
        <aop:aspectj-autoproxy proxy-target-class="true" />
</beans>